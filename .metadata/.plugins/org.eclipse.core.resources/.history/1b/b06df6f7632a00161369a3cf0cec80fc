'''

@author: Yanqing
'''
from Helpers import *

# Require: D is a set of ordered pairs sorted in increasing order by x-value
# Require: Q is a y-axis partition of D
# Require: x is an integer greater than 1
def ApproxOptimizeXAxis(D, Q, x, tildek):
    c = GetClumpsPartition(D, Q)
    k = len(c) - 1;
    if k > tildek:
        c = GetSuperclumpsPartition(c, tildek)
        k = len(c) - 1;
    P = [[[] for i in range(0, x + 1)] for y in range(0, k + 1)]
    I = [[0 for i in range(0, x + 1)] for y in range(0, k + 1)]
    
    [count,sumCol] = countNum(D, c, Q)
     
    #caculate H(Q)
    hq = HQ(c, count, sumCol)
    if k == 1:
        return [0, hq]
    
    #Find the optimal partitions of size 2
    for t in range(2,k + 1):
        maxDiff = float('-inf')
        #Find s \in {1,...,t} maximizing H(<c0,cs,ct>)- H(<c0,cs,cti>,Q).
        c0_ct = [c[0],c[t]]
        for s in range(1, t):
            c0_cs_ct = unionPartition(c0_ct, c[s])
            
            #caculate H(P)
            hpt2 = HP(c0_cs_ct, c, sumCol)
            
            #caculate H(P,Q)
            hpq = HPQ(c0_cs_ct, c, count, sumCol) 
            
            diffEntropy = hpt2 - hpq
            if diffEntropy > maxDiff:
                maxDiff = diffEntropy
                P[t][2] = c0_cs_ct
        I[t][2] = hq + HP(P[t][2], c, sumCol) - HPQ(P[t][2], c, count, sumCol) 
    if k == 2:
        return I[k]            
    #Inductively build the rest of the table of optimal partitions
    for l in range(3, x + 1):
        for t in range(l, k + 1):
            maxDiff = float('-inf')
            for s in range(l - 1, t + 1):
                firstPart = (c[s]/c[t]) * (I[s][l-1] - hq)
                cs_ct = [c[s],c[t]]
                hpq = HPQ(cs_ct, c, count, sumCol) 
                secondPart = ((c[t] - c[s])/c[t]) * hpq 
                
                if (firstPart - secondPart) > maxDiff:
                    maxDiff = firstPart - secondPart
                    P[t][l] = unionPartition(P[s][l-1], c[t])
        
        if t != None:            
            I[t][l] = hq + HP(P[t][l], c, sumCol) - HPQ(P[t][l], c, count, sumCol)
    
    for l in range(k + 1, x + 1):
        P[k][l] = P[k][k]      
        I[k][l] = I[k][k]  
        
    return I[k]     

def ApproxMaxMI(D,x,y,tildek): 
    Q = equipartitionYAxis(D, y)
    D = SortInIncreasingOrderByXValue(D)
    return ApproxOptimizeXAxis(D, Q, x, tildek)
    

if __name__ == '__main__':
    D = [(1,1),(2,2),(3,3),(4,4),(5,5),(6,6)]
    Q = [-1,1,2,3,4,5,6]
    
    I = ApproxOptimizeXAxis(D, Q, 3, 4)
    print I