'''

@author: Yanqing
'''
from Helpers import *

# Require: D is a set of ordered pairs sorted in increasing order by x-value
# Require: Q is a y-axis partition of D
# Require: x is an integer greater than 1
def ApproxOptimizeXAxis(D, Q, x, tildek):
    c = GetClumpsPartition(D, Q)
    k = len(c) - 1;
    if k > tildek:
        c = GetSuperclumpsPartition(c, tildek)
        numClumps= tildek
    P = [[[] for i in range(1, x + 1)] for y in range(1, k + 1)]
    I = [[0 for i in range(1, x + 1)] for y in range(1, k + 1)]
    
    [count,sumCol] = countNum(D, c, Q)
     
    #caculate H(Q)
    HQ = HQ(P, count, sumCol)
    
    #Find the optimal partitions of size 2
    for t in range(2,k + 1):
        maxDiff = float('-inf')
        #Find s \in {1,...,t} maximizing H(<c0,cs,ct>)- H(<c0,cs,cti>,Q).
        c0_ct = [c[0],c[t]]
        for s in range(1, t + 1):
            c0_cs_ct = unionPartition(c0_ct, c[s])
            
            #caculate H(P)
            HPt2 = HP(c0_cs_ct, P, sumCol)
            
            #caculate H(P,Q)
            HPQ = HPQ(c0_cs_ct, P, count, sumCol) 
            
            diffEntropy = HPt2 -HPQ
            if diffEntropy > maxDiff:
                maxDiff = diffEntropy
                P[t][2] = c0_cs_ct
                I[t][2] = HQ + diffEntropy
                
    #Inductively build the rest of the table of optimal partitions
    for l in range(3, x + 1):
        for t in range(l, k + 1):
            maxDiff = float('-inf')
            for s in range(l - 1, t + 1):
                firstPart = (c[s]/c[t]) * (I[s][l-1] - HQ)
                cs_ct = [c[s],c[t]]
                HPQ = HPQ(cs_ct, P, count, sumCol) 
                secondPart = ((c[t] - c[s])/c[t]) * HPQ 
                
                if (firstPart - secondPart) > maxDiff:
                    maxDiff = firstPart - secondPart
                    I[t][l] = HQ + maxDiff
    
    for l in range(k + 1, x + 1):
        P[k][l] = P[k][k]      
        I[k][l] = I[k][k]  
        
    return I                 

if __name__ == '__main__':
    D = [(1,2),(3,4),(3,5), (3,6),(4,7)]
    Q = [-1,4,5,7]
    
    I = ApproxOptimizeXAxis(D, Q, x, 4)