'''

@author: Yanqing
'''
from Helpers import *

# Require: D is a set of ordered pairs sorted in increasing order by x-value
# Require: Q is a y-axis partition of D
# Require: x is an integer greater than 1
def ApproxOptimizeXAxis(D, Q, x, tildek):
    c = GetClumpsPartition(D, Q)
    k = len(c) - 1;
    if k > tildek:
        c = GetSuperclumpsPartition(c, tildek)
        numClumps= tildek
    P = [[[] for x in range(1, x + 1)] for y in range(1, k + 1)]
    I = [[0 for x in range(1, x + 1)] for y in range(1, k + 1)]
     
    #caculate H(Q), which means only have one row so P = [0,P[-1]] 
    [count,sumCol] = countNum(D, [0,P[-1]], Q)
    HQ = entropy(count, sumCol)   
    #Find the optimal partitions of size 2
    
    for t in range(2,k + 1):
        maxDiff = float('-inf')
        #Find s \in {1,...,t} maximizing H(<c0,cs,ct>)- H(<c0,cs,cti>,Q).
        c0_ct = [c[0],c[t]]
        for s in range(1, t + 1):
            c0_cs_ct = unionPartition(c0_ct, c[s])
            #caculate H(P), which means only have one row so Q = [-1,Q[-1]]
            [count,sumCol] = countNum(D, c0_cs_ct, [-1,Q[-1]])
            HP = entropy(count, sumCol)
            #caculate H(P,Q)
            [count,sumCol] = countNum(D, c0_cs_ct, Q)
            HPQ = entropy(count, sumCol)
            
            diffEntropy = HP -HPQ
            if diffEntropy > maxDiff:
                maxDiff = diffEntropy
                P[t][2] = c0_cs_ct
                I[t][2] = HQ + diffEntropy
                
    #Inductively build the rest of the table of optimal partitions  
        
    
    

if __name__ == '__main__':
    pass